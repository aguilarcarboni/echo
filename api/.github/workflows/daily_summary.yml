name: Daily Pending Tasks & Leads Summary

on:
  schedule:
    # Every day at 3 PM UTC (9:00 AM CST)
    - cron: '0 15 * * *'
  workflow_dispatch:

jobs:
  fetch-summary:
    runs-on: ubuntu-latest
    outputs:
      pending_tasks: ${{ steps.fetch.outputs.pending_tasks }}
      leftover_pending_tasks: ${{ steps.fetch.outputs.leftover_pending_tasks }}
      leads: ${{ steps.fetch.outputs.leads }}
      leftover_leads: ${{ steps.fetch.outputs.leftover_leads }}
    steps:
      - name: Request token and fetch tasks
        id: fetch
        shell: bash
        run: |
            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            # 1. Fetch access token (same mechanism as ETL / other jobs)
            response=$(curl -s -w "\n%{http_code}" -X POST \
              -H "Content-Type: application/json" \
              -d '{"token":"all"}' \
              https://api.agmtechnology.com/token)

            http_status=$(echo "$response" | tail -n1)
            body=$(echo "$response" | sed '$d')

            if [ "$http_status" != "200" ]; then
              echo "Token request failed with status $http_status" >&2
              exit 1
            fi

            access_token=$(echo "$body" | jq -r '.access_token')
            if [ "$access_token" = "null" ] || [ -z "$access_token" ]; then
              echo "access_token not found in response" >&2
              exit 1
            fi

            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            # 2. Fetch Pending Tasks
            response=$(curl -s -w "\n%{http_code}" -X GET \
              -H "Authorization: Bearer $access_token" \
              https://api.agmtechnology.com/pending_tasks/read)
            http_status=$(echo "$response" | tail -n1)
            tasks_body=$(echo "$response" | sed '$d')
            if [ "$http_status" != "200" ]; then
              echo "Fetching pending tasks failed with status $http_status" >&2
              exit 1
            fi

            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            # 3. Fetch Leads
            response=$(curl -s -w "\n%{http_code}" -X GET \
              -H "Authorization: Bearer $access_token" \
              https://api.agmtechnology.com/leads/read)
            http_status=$(echo "$response" | tail -n1)
            leads_body=$(echo "$response" | sed '$d')
            if [ "$http_status" != "200" ]; then
              echo "Fetching leads failed with status $http_status" >&2
              exit 1
            fi

            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            # 3. Postprocess

            # Extract plain list of pending task descriptions (one per line) up to 5 tasks
            pending_tasks=$(echo "$tasks_body" | jq -r '.pending_tasks[] | .description' | head -n 5 2>&1)

            # Extract the total number of pending tasks
            total_pending_tasks=$(echo "$tasks_body" | jq -r '.pending_tasks | length')
            leftover_pending_tasks=$((total_pending_tasks - 5))

            # Extract plain list of lead descriptions (one per line) up to 5 leads
            leads=$(echo "$leads_body" | jq -r '.leads[] | .description' | head -n 5 2>&1)

            # Extract the total number of leads
            total_leads=$(echo "$leads_body" | jq -r '.leads | length')
            leftover_leads=$((total_leads - 5))

            echo "Pending tasks extracted: $pending_tasks" >&2
            if [ -z "$pending_tasks" ]; then
              echo "Warning: No pending tasks extracted (possibly empty list or jq mismatch)" >&2
              pending_tasks="No pending tasks found."
            fi

            echo "Leads extracted: $leads" >&2
            if [ -z "$leads" ]; then
              echo "Warning: No leads extracted (possibly empty list or jq mismatch)" >&2
              leads="No leads found."
            fi

            # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
            # 3. Export outputs for downstream steps
            printf "pending_tasks<<EOF\n%s\nEOF\n" "$pending_tasks" >> "$GITHUB_OUTPUT"
            printf "leftover_pending_tasks<<EOF\n%s\nEOF\n" "$leftover_pending_tasks" >> "$GITHUB_OUTPUT"
            printf "leads<<EOF\n%s\nEOF\n" "$leads" >> "$GITHUB_OUTPUT"
            printf "leftover_leads<<EOF\n%s\nEOF\n" "$leftover_leads" >> "$GITHUB_OUTPUT"

  notify:
    needs: fetch-summary
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Prepare email body
        id: prep_email
        env:
          TASKS_JSON: ${{ needs.fetch-summary.outputs.pending_tasks }}
          LEFTOVER_PENDING_TASKS: ${{ needs.fetch-summary.outputs.leftover_pending_tasks }}
          LEADS_JSON: ${{ needs.fetch-summary.outputs.leads }}
          LEFTOVER_LEADS: ${{ needs.fetch-summary.outputs.leftover_leads }}
        run: |
          printf "body<<EOF\n" >> "$GITHUB_OUTPUT"
          printf "Hello AGM team,\n\n" >> "$GITHUB_OUTPUT"
          printf "We have the following pending tasks:\n" >> "$GITHUB_OUTPUT"
          printf "$TASKS_JSON\n" >> "$GITHUB_OUTPUT"
          printf "and $LEFTOVER_PENDING_TASKS more...\n" >> "$GITHUB_OUTPUT"
          printf "\nWe also have the following leads:\n" >> "$GITHUB_OUTPUT"
          printf "$LEADS_JSON\n" >> "$GITHUB_OUTPUT"
          printf "and $LEFTOVER_LEADS more...\n" >> "$GITHUB_OUTPUT"
          printf "\nPlease review them and take action as needed.\n" >> "$GITHUB_OUTPUT"
          printf "\nHave a great day!\n" >> "$GITHUB_OUTPUT"
          printf "EOF\n" >> "$GITHUB_OUTPUT"

      - name: Send daily summary email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ðŸ“¬ Daily Pending Tasks Summary"
          to: aa@agmtechnology.com,cr@agmtechnology.com,jc@agmtechnology.com,hc@agmtechnology.com,rc@agmtechnology.com,mjc@agmtechnology.com,ac@agmtechnology.com
          from: aa@agmtechnology.com
          body: ${{ steps.prep_email.outputs.body }}

  notify-failure:
    needs: fetch-summary
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Send failure email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ðŸš¨ Daily Summary Workflow FAILED"
          to: aa@agmtechnology.com,cr@agmtechnology.com,jc@agmtechnology.com,hc@agmtechnology.com,rc@agmtechnology.com,mjc@agmtechnology.com,ac@agmtechnology.com
          from: aa@agmtechnology.com
          body: |
            The daily pending tasks summary workflow failed. Please review the workflow logs for details.
